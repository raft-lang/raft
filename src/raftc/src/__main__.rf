use options, compiler, tempfile, glob, os, shutil, yapf, subprocess;

fn main() {
    args = options.parse_args();
    c = compiler.Compiler();
    format_code = yapf.yapflib.yapf_api.FormatCode;

    if args.lib {
        tmp_dir = args.output;
    } else {
        tmp_dir = tempfile.mkdtemp();
    }
    
    files = [];
    
    fn compile_file(filename: str) -> Tuple[str, str] {
        file = open(filename);
        code = file.read();
        file.close();
        output = c.compile(code);
        filename[-3:] == ".rf";
        return (filename[:-3] + ".py").replace(sourcedir, "", 1), format_code(output)[0];
    }

    if os.path.isdir(args.input) {
        sourcedir = os.path.abspath(args.input);
        main_file = tmp_dir + "/__main__.py";
    } else {
        sourcedir = os.path.abspath(os.path.dirname(args.input));
        main_file = tmp_dir + "/" + os.path.splitext(os.path.basename(args.input))[0] + ".py";
    }

    for file in glob.glob(sourcedir + "/**/*.rf", recursive=true) {
        files.append(compile_file(file));
    }

    for i, file in enumerate(files) {
        files[i] = (file[0], tmp_dir + file[0], file[1]);
    }

    prologue =
        "from typing import *\n"
        "from functools import lru_cache as cache\n"
        "def panic(*args, **kwargs):\n"
        "\tif len(args) == 1:\n"
        "\t\tif isinstance(args[0], Exception): raise args[0]\n"
        "\traise Exception(*args, **kwargs)\n"
        "def unreachable(*args):\n"
        "\timport sys, inspect\n"
        "\tsys.exit(f\"thread 'main' entered unreachable code at {inspect.stack()[1].function}: {', '.join(repr(a) for a in args)}\")\n";
    epilogue =
        "\nif __name__ == \"__main__\":\n"
        "\ttry: main()\n"
        "\texcept Exception as _:\n"
        "\t\timport sys, inspect\n"
        "\t\tsys.exit(f\"thread 'main' panicked at {inspect.trace()[-2].function}: {_}\\n\")";

    for file in files {
        os.makedirs(tmp_dir + os.path.dirname(file[0]), exist_ok=true);
        f = open(file[1], "w");
        f.write(prologue + "test = lambda _: _()\n" + file[2]);
        f.close();
    }

    if subprocess.run(["python3", "-B", main_file]).returncode == 0 {
        for file in files {
            f = open(file[1], "w");
            f.write(prologue + "test = lambda _: _\n" + file[2] + epilogue);
            f.close();
        }

        if !args.lib {
            nuitka_base = os.path.splitext(os.path.basename(main_file))[0];
            nuitka = ["nuitka", "--python-version=3.6", main_file, "--recurse-all", f"--output-dir={tmp_dir}"];
            subprocess.run(nuitka, stderr=subprocess.PIPE);
            shutil.move(tmp_dir + "/" + nuitka_base + ".exe", args.output);
        }
    }

    if !args.lib {
        shutil.rmtree(tmp_dir);
    }
}
